nums = [25,26,27,28]
print(nums)
nums.extend([30,31,32,33])
print(nums)
print(min(nums))
print(sum(nums))
print(nums.sort())

tuples = (23,24,2,4)
print(tuples)
print(tuples[1])

set = {1,2,3,4,5,6,8}
print(set)
# print(set[1])
# print(set.pop())

print(id(nums))

number = 2+5j 
print(type(number))

a = 5
b = 6
print(b>a)

print(range(10))
print(list(range(10)))
print(list(range(2,10,2)))  #range(start,end,difference)

d = {'navin':'samsung', 'rahul':'apple','kiran':'poco'}
print(d)
print(d.keys())
print(d.values()) 
print(d['rahul'])
print(d.get('kiran'))

x = 7
y = 7
print(x==y)
print(x!=y)

c = 5
d = 9
print(c<8 and d<10)
print(c<8 or d<9)

print(bin(25)) # bin function is used to convert decimal number into binary number
print(oct(25))
print(hex(25))

#swipe 2 variables
f = 5
g = 6
temp = f
f = g
g = temp
print(temp)
print(f)
print(g)
# so here we get f = 6 and g = 5.
# other method to do the same thing is

f = f + g
g = f - g
f = f - g

print(f)
print(g)

# also we can use better method than the above 2 which is xor (^) method as it does not waste memory.
f = f ^ g
g = f ^ g
f = f ^ g
print(f)
print(g)

# the shortcut method to swipe 2 variables is

f,g = g,f

print(f)
print(g)

print(~12)  # this is complement of 12.
print(~ 121)

#bitwise operators
print(12 & 13) # and operator
print(12 | 13) # or operator
print(12 | 116)
print(12 ^ 13) # xor operator
print(12 << 16) # left shift operator
print(12 >> 17) # right shift operator

# import math function.
import math
x = math.sqrt(25)
print(x) 

print(math.floor(2.1))
print(math.ceil(2.1))
print(math.pow(3,2)) # 3**2
print(math.pi)
print(math.e)

import math as m
print(m.floor(3.6))

from math import sqrt,pow
print(sqrt(16))
print(pow(4,5))

#result = eval(input("Enter an expression:"))
#print(result)

# if elif else statement.
x = 8
r = x % 2

if r == 0:
    print("even")
    if x>5:
        print("Great")
    else:
        print("Not so great")
else:
    print("odd")
    
u = 5
if u == 1:
    print("one")
elif(u == 2):
    print("two")
else:
    print("wrong input")

#loops in python.
#while loop.
i = 1
while i <= 5:
    print("How are you i?, %d")
    i += 1


j = 1
while j <= 5:
    print("How are you", end='')
    k = 1
    while k <= 4:
        print("Aarjav", end='')
        k += 1
    j += 1
    print()
    
    
# for loops

x = ["navin", 65, 3.5]
for i in x:
    print(i)
    
    
for i in range(11,21,2): #range(starting, ending,difference)
    print(i) 
    
for i in range(11,1,-1): #range(starting, ending,difference)
    print(i) 
    
# break continue pass
#break
av = 5
x = int(input("How many candies you want? "))

i = 1
while i <= x:
    if i>av:
        print("Out of stock")
        break
    print("candy")
    i+=1
print("Bye!")

#continue
for i in range(1,101): 
    if i%3==0 and i%5==0:
        continue
    print(i)
print("Bye!")

#pass
for i in range(1,101): 
    if i%3!=0:
        pass
    else:
        print(i)
print("Bye!")

# printing patterns
for i in range(4):
    for j in range(4):
        print("#", end='')
    print()
    
for i in range(4):
    for j in range(i+1):
        print("#", end='')
    print()
    
    
# for else in python
nums = [ 11,16,18,21,26]
for num in nums:
    if num%5==0:
        print(num)
        break
else:
    print("Not Found")
    
# to find a prime number.

num = 7
for i in range(2, num):
    if num%i==0:
        print("Not a prime number")
        break
else:
    print("prime number")
    
#array
from array import *
vals = array("i",[5,9,-8,4,2])
print(vals.buffer_info()) #buffer_info() is use to find address and type of an array.
print(vals.typecode)
for i in range(len(vals)):
    print(vals[i])
    
arr = array("i",[])
n = int(input("Enter the length of an array: "))
for i in range(n):
    x = int(input("Enter the value: "))
    arr.append(x)
print(arr)

val = int(input("Enter the value for search: "))
k = 0
for e in arr:
    if e == val:
        print(k)
        break
    k += 1
print(arr.index(val))

#numpy
from numpy import *
arr = array([1,2,3,5,4],int)
print(arr)

arr = array([1,2,3,5,4,5,0])
print(arr.dtype)
print(arr)

arr = linspace(0,15,20) #linspace(start, end, parts)
print(arr)

arr = linspace(0,15) #linspace(start, parts)
print(arr)

arr = arange(1,15,2) # arange(start,end,steps)
print(arr)

arr = logspace(0,15,2) # logspace(start, end, steps). here we print in the form of a log i.e 10^i.
print(arr)
#to print the output in normal form we use 
print('%.2f'%arr[1])

arr = zeros(5) # it is use to print an array of zeros.
print(arr)

arr = ones(5, int) # it is use to print an array of ones.
print(arr)

arr1 = array([1,2,3,4,5])
arr2 = array([6,7,8,9,10])
print(concatenate([arr1, arr2])) # to merge the two arrays.

#copying an array.
arr1 = array([1,2,3,4,5])
arr2 = arr1
print(arr1)
print(arr2)
print(id(arr1))
print(id(arr2))

#shallow copying (2 arrays linked to each other)
arr1 = array([2,6,8,1,3])
arr2 = arr1.view() #.view gives shallow copy
arr1[1] = 7
print(arr1)
print(arr2)
print(id(arr1))
print(id(arr2))

#deep copying (2 arrays not linked together)

arr1 = array([2,6,8,1,3])
arr2 = arr1.copy() # .copy gives deep copy.
arr1[1] = 7
print(arr1)
print(arr2)
print(id(arr1))
print(id(arr2))

#matrix or 2 dimentional array.
arr1 = array([[1,2,3,6,2,9],
                [4,5,6,7,5,3]])
print(arr1)
print(arr1.dtype)
print(arr1.ndim)
print(arr1.shape) #number of rows and columns.
print(arr1.size)

arr2 = arr1.flatten()
arr3 = arr2.reshape(2,2,3) #means we have one big array which has 2 2D arrays which has 2 1D arrayswhich has 3 values.

print(arr2)
print(arr3)


m = matrix('1 2 3 4 ; 5 6 7 8') 
m1 = matrix('1 2 ;3 4 ; 5 6 ;7 8')#4 rows and 2 columns
m2 = matrix('1 2 3; 4  5 6 ;7 8 9') #3 rows and 3 columns

print(m)
print(m1)
print(m2)
print(diagonal(m))
print(m.min())
print(m.max()) 

m3 = m * m1
print(m3)

#functions in python
def add_sub(x,y):
    c = x + y
    d = x - y
    return c,d
return1,return2 = add_sub(5,4)
print(return1, return2)


#function arguments
def update(x):
    print(id(x))
    x = 8
    print("x",x)

a = 10
print(id(a))
update(a)
print("a",a)

def add(a,b): #a,b are formal arguments
    c = a + b
    print(c)
    
add(5,6) #5,6 are actual arguments


def sum(a, *b): # *b means it can hold multiple arguments.
    c = a
    
    for i in b:
        c = c + i
    print(c)
sum(5,6,34,78)

def person(name, **data): # **data means it can hold multiple arguments with help of keywords.
    print(name)
    print(data)
person("navin", age = 28, city = "Mumbai", mob = 9870654)


def person(name, **data):
    print(name)
    
    for i,j in data.items(): # keyword argument
        print(i,j)
person("navin", age = 28, city = "Mumbai", mob = 9870654)


a = 10 # global variable
def something():
    a = 15 # local variable
    print("In Function",a)
something()
print("outside Function",a)


a = 10 # global variable
def something():
    global a
    a = 15 # local variable
    print("In Function",a)
something()
print("outside Function",a)


a = 10 # global variable
def something():
    a = 9# local variable
    x = globals()['a']
    print("In Function",a)
    globals()['a'] = 15
    
something()
print("outside Function",a)



def count(lst):
    even = 0
    odd = 0
    for i in lst:
        if i % 2 == 0:
            even += 1
        else:
            odd += 1
    return even, odd
lst = [20,25,14,19,16,24,28,47,26]
even, odd = count(lst)
print(even)
print(odd)
#or it can also be printed as
print("Even : {} and odd : {}".format(even, odd))


# fibonacci series.
def fibonacci(n):
    a = 0
    b = 1
    if n ==1:
        print(a)
    else:
        print(a)
        print(b)
        for i in range(2, int(n)):
            c = a + b
            a = b
            b = c
            print(c)
fibonacci(input("Enter the number of terms: "))

# Factorial
def fact(n):
    f = 1
    for i in range(1, n+1):
        f = f*1
    return f
x = 5
result = fact(x)
print(result)

#recursion = function calling itself.

# import sys
# sys.setrecursionlimit(2000)
# print(sys.getrecursionlimit())
# i = 0
# def greet():
#     global i
#     i += 1
#     print("Hello", i)
#     greet()
# greet()

#Factorial using recursion.
def fact(n):
    if n == 0: 
        return 1
    return n * fact(n-1)
result = fact(5)
print(result)


# Anonymous function or lambda functions.
#Functions are object in python.
f = lambda a : a*a
result = f(5)
print(result)

def is_even(n):
    return n%2 == 0
nums = [3,2,6,8,4,6,2,9]
evens = list(filter(is_even,nums)) # filter is a function used to filter the list.
print(evens)

#or filter using lambda function
nums = [3,2,6,8,4,6,2,9]
evens = list(filter(lambda n : n%2 == 0,nums))
print(evens)

#map function
nums = [3,2,6,8,4,6,2,9]
evens = list(filter(lambda n : n%2 == 0,nums))
doubles = list(map(lambda n : n*2,evens)) #map(function, sequence)
print(doubles)

#reduce function
from functools import reduce

nums = [3,2,6,8,4,6,2,9]
evens = list(filter(lambda n : n%2 == 0,nums))
doubles = list(map(lambda n : n*2,evens)) 
print(doubles)
sum = reduce(lambda a,b : a+b, doubles) #reduce(function, sequence)
print(sum)

#decorators 
def div(a,b):
    print(a/b)
    
def smart_dev(func):
    def inner(a,b):
        if a<b:
            a,b = b,a
        return func(a,b)
    return inner
div = smart_dev(div)
div(2,4)

#modules in python 
from Calc import *
c = add(4,5)
print(c)


#special variable __name__
from Calc2 import *
def fun1():
    add()
    print("from fun1")
def fun2():
    print("from fun2")
    
def main():
    fun1()
    fun2()
main()

#class in python.
class Computer:  # a class has atributes/variabls and behaviors/methods/functions.
    def config(self):
        print("i5, 16gb, 1TB")
com1 = Computer()
com2 = Computer()
Computer.config(com1)
Computer.config(com2)
#or
com1.config()
com2.config()


#Special method __init__ method 

class Computer: 
    def __init__(self, cpu, ram): #  here object is self
        self.cpu = cpu
        self.ram = ram
    def config(self):
        print("config is: ", self.cpu, self.ram)
        
com1 = Computer('i5',16)
com2 = Computer('Ryzen 3', 8)

com1.config()
com2.config()

#constructor, self and comparing objects.
class Computer:
    def __init__(self):
        self.name = "Aarjav"
        self.age = 24
    def update(self):
        self.age = 23
c1 = Computer()
c2 = Computer()

c1.name = "Rashi"
c1.age = 12
c1.update()
print(c1.name)
print(c2.name)


class Computer:
    def __init__(self):
        self.name = "Aarjav"
        self.age = 24
    def update(self):
        self.age = 23
        
    def compare(self, other): #compare(who is calling, whom to compare)
        if self.age == other.age:
            return True
        else:
            return False
        
c1 = Computer()
c1.age = 30
c2 = Computer()

if c1.compare(c2):
    print("They are same")
else:
    print("They are different")


print(c1.name)
print(c2.name)


#there are 2 variables in oop i.e instance variable and class(static) variable.
# instance variable value changes 
#static variable value remains same
class Car:
    wheels = 4
    def __init__(self):
        self.mil = 10
        self.com = "Benz"
c1 = Car()
c2 = Car()

c1.mil = 12

Car.wheels = 8

print(c1.com, c1.mil,c1.wheels)
print(c2.com, c2.mil,c2.wheels)

#Types of methods.
#Accessor methods and mutator methods.
class Students:
    school = "Teclusko"
    
    def __init__(self,m1,m2,m3):
        self.m1 = m1
        self.m2 = m2
        self.m3 = m3
    def avg(self):
        return (self.m1 + self.m2 + self.m3) / 3
s1 = Students(34,47,32)
s2 = Students(89,32,12)
print(s1.avg())

class Students:
    school = "Teclusko"
    
    def __init__(self,m1,m2,m3):
        self.m1 = m1
        self.m2 = m2
        self.m3 = m3
    def avg(self):
        return (self.m1 + self.m2 + self.m3) / 3
    
    def get_m1(self): #get method gets the value so they are called accessors
        return self.m1
    def set_m1(self, value): # set method sets the value so they are called mutators
        self.m1 = value
        
s1 = Students(34,47,32)
s2 = Students(89,32,12)
print(s1.avg())



# firstname = input("First Name:" )
# lastname = input("Last Name:" )

# print("Your full name is " + firstname + " " + lastname)