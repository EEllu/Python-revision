nums = [25,26,27,28]
print(nums)
nums.extend([30,31,32,33])
print(nums)
print(min(nums))
print(sum(nums))
print(nums.sort())

tuples = (23,24,2,4)
print(tuples)
print(tuples[1])

set = {1,2,3,4,5,6,8}
print(set)
# print(set[1])
# print(set.pop())

print(id(nums))

number = 2+5j 
print(type(number))

a = 5
b = 6
print(b>a)

print(range(10))
print(list(range(10)))
print(list(range(2,10,2)))  #range(start,end,difference)

d = {'navin':'samsung', 'rahul':'apple','kiran':'poco'}
print(d)
print(d.keys())
print(d.values()) 
print(d['rahul'])
print(d.get('kiran'))

x = 7
y = 7
print(x==y)
print(x!=y)

c = 5
d = 9
print(c<8 and d<10)
print(c<8 or d<9)

print(bin(25)) # bin function is used to convert decimal number into binary number
print(oct(25))
print(hex(25))

#swipe 2 variables
f = 5
g = 6
temp = f
f = g
g = temp
print(temp)
print(f)
print(g)
# so here we get f = 6 and g = 5.
# other method to do the same thing is

f = f + g
g = f - g
f = f - g

print(f)
print(g)

# also we can use better method than the above 2 which is xor (^) method as it does not waste memory.
f = f ^ g
g = f ^ g
f = f ^ g
print(f)
print(g)

# the shortcut method to swipe 2 variables is

f,g = g,f

print(f)
print(g)

print(~12)  # this is complement of 12.
print(~ 121)

#bitwise operators
print(12 & 13) # and operator
print(12 | 13) # or operator
print(12 | 116)
print(12 ^ 13) # xor operator
print(12 << 16) # left shift operator
print(12 >> 17) # right shift operator

# import math function.
import math
x = math.sqrt(25)
print(x) 

print(math.floor(2.1))
print(math.ceil(2.1))
print(math.pow(3,2)) # 3**2
print(math.pi)
print(math.e)

import math as m
print(m.floor(3.6))

from math import sqrt,pow
print(sqrt(16))
print(pow(4,5))

#result = eval(input("Enter an expression:"))
#print(result)

# if elif else statement.
x = 8
r = x % 2

if r == 0:
    print("even")
    if x>5:
        print("Great")
    else:
        print("Not so great")
else:
    print("odd")
    
u = 5
if u == 1:
    print("one")
elif(u == 2):
    print("two")
else:
    print("wrong input")

#loops in python.
#while loop.
i = 1
while i <= 5:
    print("How are you i?, %d")
    i += 1


j = 1
while j <= 5:
    print("How are you", end='')
    k = 1
    while k <= 4:
        print("Aarjav", end='')
        k += 1
    j += 1
    print()
    
    
# for loops

x = ["navin", 65, 3.5]
for i in x:
    print(i)
    
    
for i in range(11,21,2): #range(starting, ending,difference)
    print(i) 
    
for i in range(11,1,-1): #range(starting, ending,difference)
    print(i) 
    
# break continue pass
#break
av = 5
x = int(input("How many candies you want? "))

i = 1
while i <= x:
    if i>av:
        print("Out of stock")
        break
    print("candy")
    i+=1
print("Bye!")

#continue
for i in range(1,101): 
    if i%3==0 and i%5==0:
        continue
    print(i)
print("Bye!")

#pass
for i in range(1,101): 
    if i%3!=0:
        pass
    else:
        print(i)
print("Bye!")

# printing patterns
for i in range(4):
    for j in range(4):
        print("#", end='')
    print()
    
for i in range(4):
    for j in range(i+1):
        print("#", end='')
    print()
    
    
# for else in python
nums = [ 11,16,18,21,26]
for num in nums:
    if num%5==0:
        print(num)
        break
else:
    print("Not Found")
    
# to find a prime number.

num = 7
for i in range(2, num):
    if num%i==0:
        print("Not a prime number")
        break
else:
    print("prime number")
    
#array
from array import *
vals = array("i",[5,9,-8,4,2])
print(vals.buffer_info()) #buffer_info() is use to find address and type of an array.
print(vals.typecode)
for i in range(len(vals)):
    print(vals[i])
    
arr = array("i",[])
n = int(input("Enter the length of an array: "))
for i in range(n):
    x = int(input("Enter the value: "))
    arr.append(x)
print(arr)

val = int(input("Enter the value for search: "))
k = 0
for e in arr:
    if e == val:
        print(k)
        break
    k += 1
print(arr.index(val))

#numpy
from numpy import *
arr = array([1,2,3,5,4],int)
print(arr)

arr = array([1,2,3,5,4,5,0])
print(arr.dtype)
print(arr)

arr = linspace(0,15,20) #linspace(start, end, parts)
print(arr)

arr = linspace(0,15) #linspace(start, parts)
print(arr)

arr = arange(1,15,2) # arange(start,end,steps)
print(arr)

arr = logspace(0,15,2) # logspace(start, end, steps). here we print in the form of a log i.e 10^i.
print(arr)
#to print the output in normal form we use 
print('%.2f'%arr[1])

arr = zeros(5) # it is use to print an array of zeros.
print(arr)

arr = ones(5, int) # it is use to print an array of ones.
print(arr)

arr1 = array([1,2,3,4,5])
arr2 = array([6,7,8,9,10])
print(concatenate([arr1, arr2])) # to merge the two arrays.

#copying an array.
arr1 = array([1,2,3,4,5])
arr2 = arr1
print(arr1)
print(arr2)
print(id(arr1))
print(id(arr2))

#shallow copying (2 arrays linked to each other)
arr1 = array([2,6,8,1,3])
arr2 = arr1.view() #.view gives shallow copy
arr1[1] = 7
print(arr1)
print(arr2)
print(id(arr1))
print(id(arr2))

#deep copying (2 arrays not linked together)

arr1 = array([2,6,8,1,3])
arr2 = arr1.copy() # .copy gives deep copy.
arr1[1] = 7
print(arr1)
print(arr2)
print(id(arr1))
print(id(arr2))

#matrix or 2 dimentional array.
arr1 = array([[1,2,3,6,2,9],
                [4,5,6,7,5,3]])
print(arr1)
print(arr1.dtype)
print(arr1.ndim)
print(arr1.shape) #number of rows and columns.
print(arr1.size)

arr2 = arr1.flatten()
arr3 = arr2.reshape(2,2,3) #means we have one big array which has 2 2D arrays which has 2 1D arrayswhich has 3 values.

print(arr2)
print(arr3)


m = matrix('1 2 3 4 ; 5 6 7 8') 
m1 = matrix('1 2 ;3 4 ; 5 6 ;7 8')#4 rows and 2 columns
m2 = matrix('1 2 3; 4  5 6 ;7 8 9') #3 rows and 3 columns

print(m)
print(m1)
print(m2)
print(diagonal(m))
print(m.min())
print(m.max()) 

m3 = m * m1
print(m3)

#functions in python
def add_sub(x,y):
    c = x + y
    d = x - y
    return c,d
return1,return2 = add_sub(5,4)
print(return1, return2)


# firstname = input("First Name:" )
# lastname = input("Last Name:" )

# print("Your full name is " + firstname + " " + lastname)